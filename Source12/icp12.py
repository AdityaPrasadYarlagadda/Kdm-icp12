# -*- coding: utf-8 -*-
"""icp12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MTPMMZbPThJlvNO7l1DbpegS1YRogKex

Importing all required libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense,LSTM,Dropout
from sklearn.preprocessing import MinMaxScaler

"""Importing the data"""

apple_training_complete = pd.read_csv(r'/content/traindata.csv')
apple_testing_complete

"""As we deal with only opening price of the stock.we will filter all data from training set and have values only from open column"""

apple_training_processed = apple_training_complete.iloc[:, 1:2].values

"""Data Normalization"""

scaler = MinMaxScaler(feature_range = (0, 1))

apple_training_scaled = scaler.fit_transform(apple_training_processed)

"""Converting train data to right shape.
In this predict the opening stock price of the data based on the opening stock prices for the past 30 days.
"""

features_set = []
labels = []
for i in range(30, 149):
    features_set.append(apple_training_scaled[i-30:i, 0])
    labels.append(apple_training_scaled[i, 0])

features_set, labels = np.array(features_set), np.array(labels)
features_set = np.reshape(features_set, (features_set.shape[0], features_set.shape[1], 1))

"""**Training the Lstm**

In this step Lstm and dropout layers are created.
"""

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(features_set.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50))
model.add(Dropout(0.2))
model.add(Dense(units = 1))

"""We compile the model now"""

model.compile(optimizer = 'adam', loss = 'mean_squared_error')

"""Now we'll fit the model and let it train"""

model.fit(features_set, labels, epochs = 50, batch_size = 32)

"""Importing test data"""

apple_testing_complete = pd.read_csv(r'/content/testdata.csv')
apple_testing_processed = apple_testing_complete.iloc[:, 1:2].values

"""Concatinating the train and test data"""

apple_total = pd.concat((apple_training_complete['Open'], apple_testing_complete['Open']), axis=0)

"""The input for each day should contain the opening stock prices for the previous 30 days. That means we need opening stock prices for the 20 test days and the 30 stock prices from the last 30 days for the training set."""

test_inputs = apple_total[len(apple_total) - len(apple_testing_complete) - 30:].values

test_inputs = test_inputs.reshape(-1,1)
test_inputs = scaler.transform(test_inputs)

"""let's prepare our final test input set that will contain previous 30 stock prices"""

test_features = []
for i in range(30, 50):
    test_features.append(test_inputs[i-30:i, 0])

"""Finally, we need to convert our data into the three-dimensional format which can be used as input to the LSTM. """

test_features = np.array(test_features)
test_features = np.reshape(test_features, (test_features.shape[0], test_features.shape[1], 1))

"""Making Predictions"""

predictions = model.predict(test_features)
predictions = scaler.inverse_transform(predictions)

plt.figure(figsize=(10,6))
plt.plot(apple_testing_processed, color='blue', label='Actual Apple Stock Price')
plt.plot(predictions , color='red', label='Predicted Apple Stock Price')
plt.title('Apple Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Apple Stock Price')
plt.legend()
plt.show()